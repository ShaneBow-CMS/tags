<style>
li.on {background-color: yellow}
li:hover {cursor:pointer}
i.lft,i.rgt {color:red}

~~tables/express/tbl-hor-min-a.css
table.tbl-hor-min-a {width:100%;margin:0;margin-bottom:1em}
.btns {text-align:right}

.tree-tools {padding: 7px 7px 0 0}
.tree-tools > * {margin-left: 3px}

~~cms/pages/assets/page-summary.css
.page-summary .panel-group {margin-bottom: 5px}
.row.no-gutter {margin-right:-5px; margin-left:-5px}
.row.no-gutter > div {padding-right:5px; padding-left:5px}
</style>

<div class="row">

 <div class="col-sm-5 col-lg-4">
  <div class="panel panel-default">
   <table class="tags-table tbl-hor-min-a"></table>
  </div>
 </div>

 <div class="col-sm-7 col-lg-8">
  <h3 id="tag-title">Pages</h3>
  <div id="tag-pages"></div>
  <button class="btn preview btn-primary btn-outline btn-block" alt="Preview"><i class="icon-eye4"></i></button>
 </div>

</div>

<script>
$(() => {
	class FeditTable extends UBOW.EditTable {

		constructor(tblSel, options) {
			const defaults = {
			//	fields: [],
			//	onDelete: null, // (item) => {} - if implemented, can delete
				validate: (item) => true,
				};
			const canDelete = options.onDelete? true : false;
			const tblBtnEdit = `<td><button title="Edit ${options.title}"><i class="icon-pencil"></i></button></td>`;
			let ths = `<th><button title="Add ${options.title}" class="add"><i class="icon-plus3"></i></button></th>`;
			ths += options.fields.map(f => `<th>${f[0]}</th>`).join();
			super(tblSel, {
				header: `<tr>${ths}</tr>`,
				tdsHtml: (i) => (tblBtnEdit + options.fields.map(f => `<td>${i[f[0]]}</td>`).join()),
				onClick: ($tr, $td, rowIndex, colIndex, item, e) => {
					const id = item.id;
					console.log(`CLICK row: ${rowIndex}, col: ${colIndex}, id: ${id}`, item);
					if (my.selectedID != id) {
						my.selectedID = id;
						my.selectOne(id);
						options.onSelect && options.onSelect(item);
						}
					else { // edit selected
						console.log(`e.srcElement.className: ${e.srcElement.className}`);
						my.onEdit(item, rowIndex);
						}
					},
				});
			const my = this;
			my.selectedID = null;
			my.opts = {...my.opts, ...defaults, ...options};
			my.$dlgItem = new UBOW.DlgForm({
				fields: options.fields,
				});

			// Add item handler
			my.$tbl.on('click', 'button.add', function(e) {
				my.onAdd();
				});

			}

		populate(items) {
			const my = this;
			my.$tbody.empty();
			my.rows = [];
			items.forEach(item => my.append(item));
			}

		onAdd() {
			const my = this;
			my.$dlgItem.setTitle(`Add ${my.opts.title}`);
			my.$dlgItem.form.hide('id', true);
			my.$dlgItem.add(item => {
				item.id = '0';
				my.opts.validate(item) && UBOW.ajax(my.opts.urlAdd, item, (e, dat, m) => {
					if (e) UBOW.flashError(`Add Failed: ${m}`);
					my.append(dat);
					my.$dlgItem.hide();
					});
				});
			}

		onEdit(item, rowIndex) {
			const my = this;
			my.$dlgItem.setTitle(`Edit ${my.opts.title}`);
			my.$dlgItem.form.hide('id', false);
			my.$dlgItem.edit(item, (updatedItem) => {
				console.log('onEdit back from edit', updatedItem);
				my.opts.validate(item) && UBOW.ajax(my.opts.urlUpdate, updatedItem, (e, d, m) => {
					if (e) UBOW.flashError(`Update Node Failed: ${m}`);
					my.update(rowIndex, updatedItem);
					my.$dlgItem.hide();
					});
				});
			}
		}

	// preview button
	let _title = '';
	let _slug = '';
	$('button.preview').on('click', function(e){
		e.preventDefault();
		if (!_slug) return UBOW.flashError('Slug is blank!');
		var myWindow = window.open('/page/category/'+slug, title,
			"toolbar=no,scrollbars=yes,resizable=yes,top=100,left=100,width=400,height=500");
		});

	// Pages with selected tag
	const pagesWithTag = new UBOW.PageSummaryFetcher('#tag-pages', {
		per_page: 36,
		col_class: "col-xs-6 col-sm-4 col-lg-3",
		extra: {by:'tag', id:11}, // 3d
		meta: 'title',
		container: '<div class="row same-height-row no-gutter"></div>',
		});

	// Fields shared by list and dialog
	const tagFields = [
		['id', 'input'],
		['name', 'input'],
		['brief', 'input'], //tip
		];

	// Tags List
	const tagsTbl = new FeditTable('table.tags-table', {
		title: 'Tag',
		fields: tagFields,
		urlAdd: '/tag/create',
		urlUpdate: '/tag/post',
		onSelect: (tag) => {
			_title = tag.title;
		//	_slug = n.slug;
			$('#tag-title').text(tag.name);
			pagesWithTag.reset({
				extra: {by:'tag', id:tag.id},
				});
			},
		});
	tagsTbl.populate(<?= json_encode($tags) ?>);

	// Page toolbar...
	/////////////////////
	new UBOW.DBTableBackupRestore('#page-toolbar', {
		tbl: 'tags',
		});

	});
</script>
